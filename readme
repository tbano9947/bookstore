## creating database
CREATE DATABASE bookstore;
## Authors table
| Column Name      | Data Type             | Constraints             |
| ---------------- | --------------------- | ----------------------- |
| Author_id        | integer               | PRIMARY KEY             |
| Name             | character varying     | NOT NULL                |
| genre            | character varying     |                         |
| books_published  | integer               |                         |
| last_published   | date                  |                         |

## Books table
| Column Name     | Data Type             | Constraints             |
| --------------- | --------------------- | ----------------------- |
| Book_id         | integer               | PRIMARY KEY             |
| title           | character varying     | NOT NULL                |
| author_id       | integer               | FOREIGN KEY REFERENCES Authors(Author_id) |
| genre           | character varying     |                         |
| price           | numeric               |                         |
| rating          | numeric               |                         |
| published_date  | date                  |                         |

## Customers table
| Column Name      | Data Type             | Constraints             |
| ---------------- | --------------------- | ----------------------- |
| Customer_id      | integer               | PRIMARY KEY             |
| Name             | character varying     | NOT NULL                |
| Email            | character varying     | NOT NULL                |
| Total_spent      | numeric               | NOT NULL                |
| Last_purchased   | date                  | NOT NULL                |

## review table
| Column Name   | Data Type             | Constraints                               |
| ------------- | --------------------- | ----------------------------------------- |
| Review_id     | integer               | PRIMARY KEY                               |
| book_id       | integer               | FOREIGN KEY REFERENCES Books(Book_id)     |
| customer_id   | integer               | FOREIGN KEY REFERENCES Customers(Customer_id) |
| rating        | numeric               |                                         |
| review_text   | text                  |                                         |
| review_date   | date                  |                                         |



## table authors
CREATE TABLE IF NOT EXISTS public."Authors"
(
    "Author_id" integer NOT NULL DEFAULT nextval('authors_author_id_seq'::regclass),
    "Name" character varying COLLATE pg_catalog."default" NOT NULL,
    genre character varying COLLATE pg_catalog."default" NOT NULL,
    books_published integer NOT NULL,
    last_published date NOT NULL,
    CONSTRAINT "Authors_pkey" PRIMARY KEY ("Author_id")
);

## table books

CREATE TABLE IF NOT EXISTS public."Books"
(
    "Book_id" integer NOT NULL DEFAULT nextval('books_book_id_seq'::regclass),
    title character varying COLLATE pg_catalog."default" NOT NULL,
    author_id integer NOT NULL,
    genre character varying COLLATE pg_catalog."default" NOT NULL,
    price numeric NOT NULL,
    rating numeric,
    published_date date NOT NULL,
    CONSTRAINT "Books_pkey" PRIMARY KEY ("Book_id"),
    CONSTRAINT "Books_author_id_fkey" FOREIGN KEY (author_id)
        REFERENCES public."Authors" ("Author_id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

## table customers

CREATE TABLE IF NOT EXISTS public."Customers"
(
    "Customer_id" integer NOT NULL DEFAULT nextval('customers_customer_id_seq'::regclass),
    "Name" character varying COLLATE pg_catalog."default" NOT NULL,
    "Email" character varying COLLATE pg_catalog."default" NOT NULL,
    "Total_spent" numeric NOT NULL,
    "Last_purchased" date NOT NULL,
    CONSTRAINT "Customers_pkey" PRIMARY KEY ("Customer_id")
);

## table reviews

CREATE TABLE IF NOT EXISTS public."Review"
(
    "Review_id" integer NOT NULL DEFAULT nextval('review_review_id_seq'::regclass),
    book_id integer NOT NULL,
    customer_id integer NOT NULL,
    rating numeric NOT NULL,
    review_text text COLLATE pg_catalog."default",
    review_date date NOT NULL,
    CONSTRAINT "Review_pkey" PRIMARY KEY ("Review_id"),
    CONSTRAINT "Review_book_id_fkey" FOREIGN KEY (book_id)
        REFERENCES public."Books" ("Book_id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "Review_customer_id_fkey" FOREIGN KEY (customer_id)
        REFERENCES public."Customers" ("Customer_id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

## Insert queries

-- Insert additional authors
INSERT INTO public."Authors" ("Name", "genre", "books_published", "last_published")
VALUES 
    ('J.K. Rowling', 'Fantasy', 10, '2020-05-15'),
    ('George R.R. Martin', 'Fantasy', 7, '2018-09-20'),
    ('Brandon Sanderson', 'Fantasy', 12, '2021-03-10'),
    ('Terry Pratchett', 'Fantasy', 5, '2015-11-25'), -- Adjusted to meet the requirement
    ('Ursula K. Le Guin', 'Fantasy', 8, '2013-08-15'), -- Added new author
    ('Patrick Rothfuss', 'Fantasy', 6, '2014-07-22'), -- Added new author
    ('Robin Hobb', 'Fantasy', 9, '2017-10-30'), -- Added new author
    ('Neil Gaiman', 'Fantasy', 11, '2019-12-05'); -- Added new author

-- Insert additional customers
INSERT INTO public."Customers" ("Name", "Email", "Total_spent", "Last_purchased")
VALUES 
    ('Alice Johnson', 'alice@example.com', 1500, '2023-06-01'),
    ('Bob Smith', 'bob@example.com', 2000, '2023-05-15'),
    ('Charlie Brown', 'charlie@example.com', 1200, '2023-06-10'),
    ('Eve White', 'eve@example.com', 1800, '2023-04-20'),
    ('David Lee', 'david@example.com', 2500, '2023-06-20'), -- Added new customer
    ('Emily Brown', 'emily@example.com', 2200, '2023-05-05'), -- Added new customer
    ('Frank Miller', 'frank@example.com', 1700, '2023-06-25'), -- Added new customer
    ('Grace Turner', 'grace@example.com', 1400, '2023-04-15'); -- Added new customer


INSERT INTO public."Books" ("title", "author_id", "genre", "price", "rating", "published_date")
VALUES 
    ('Harry Potter and the Philosopher''s Stone', 1, 'Fantasy', 19.99, 4.5, '1997-06-26'),
    ('A Game of Thrones', 2, 'Fantasy', 24.99, 4.8, '1996-08-06'),
    ('Mistborn: The Final Empire', 3, 'Fantasy', 17.99, 4.7, '2006-07-17'),
    ('Good Omens', 4, 'Fantasy', 15.99, 4.6, '1990-05-01'),
    ('The Left Hand of Darkness', 1, 'Fantasy', 18.99, 4.4, '1969-01-01'), -- Using existing author_id (1)
    ('The Name of the Wind', 3, 'Fantasy', 16.99, 4.9, '2007-03-27'), -- Using existing author_id (3)
    ('Assassin''s Apprentice', 6, 'Fantasy', 14.99, 4.7, '1995-04-01'); -- Using existing author_id (6)


INSERT INTO public."Review" ("book_id", "customer_id", "rating", "review_text", "review_date")
VALUES 
    (1, 1, 5, 'A wonderful start to a magical series!', '2023-06-05'),
    (2, 2, 4.5, 'Epic tale with complex characters.', '2023-05-20'),
    (3, 3, 4.8, 'Brilliant magic system and plot twists.', '2023-06-15'),
    (4, 4, 4.7, 'Hilarious and thought-provoking.', '2023-04-25'),
    (1, 1, 4.4, 'Innovative storytelling and themes.', '2023-06-10'), -- Using existing book_id (1)
    (2, 2, 4.9, 'Captivating and beautifully written.', '2023-05-30'), -- Using existing book_id (2)
    (3, 3, 4.7, 'Engaging characters and intricate plot.', '2023-06-20'), -- Using existing book_id (3)
    (4, 4, 4.6, 'A modern fantasy masterpiece.', '2023-04-15'); -- Using existing book_id (4)

## sql queries for the listed requirements
## Power writers (authors) with more than 5 books in the same genre published within the last 5 years
SELECT "Name", "genre", "books_published", "last_published"
FROM public."Authors"
WHERE "genre" = 'Fantasy'  -- Replace 'Fantasy' with the desired genre
  AND "books_published" > 5 -- Replace 5 with X (number of books threshold)
  AND "last_published" >= NOW() - INTERVAL '5 years'; 

## Loyal Customers who have spent more than 2000 dollars in the last year
SELECT "Name", "Email", "Total_spent", "Last_purchased"
FROM public."Customers"
WHERE "Total_spent" > 2000
  AND "Last_purchased" >= DATE_TRUNC('year', NOW() - INTERVAL '1 year');
  
## Well Reviewed books that have a better user rating than average
SELECT "title", "genre", "price", "rating", "published_date"
FROM public."Books"
WHERE "rating" > (SELECT AVG("rating") FROM public."Books")
ORDER BY "rating" DESC;

## The most popular genre by sales
SELECT "genre", SUM("price") AS "total_sales"
FROM public."Books"
GROUP BY "genre"
ORDER BY "total_sales" DESC
LIMIT 1;

## Query for 10 most recent posted reviews by Customers
SELECT "Review"."review_text", "Review"."review_date", "Customers"."Name" AS "customer_name"
FROM public."Review"
JOIN public."Customers" ON "Review"."customer_id" = "Customers"."Customer_id"
ORDER BY "Review"."review_date" DESC
LIMIT 10;

##  1 complete set of DDL/DML For one of the table authors and perform CRUD on all the   values of the table
## create table DDL command 
CREATE TABLE IF NOT EXISTS public."Authors"
(
    "Author_id" serial PRIMARY KEY,
    "Name" character varying(100) NOT NULL,
    "Genre" character varying(50),
    "Books_published" integer,
    "Last_published" date
);

## Alter table 
ALTER TABLE public."Authors"
ADD COLUMN "Nationality" character varying(50);

## Insert data into table
INSERT INTO public."Authors" ("Name", "Genre", "Books_published", "Last_published")
VALUES 
    ('J.K. Rowling', 'Fantasy', 10, '2020-05-15'),
    ('George R.R. Martin', 'Fantasy', 7, '2018-09-20'),
    ('Brandon Sanderson', 'Fantasy', 12, '2021-03-10'),
    ('Terry Pratchett', 'Fantasy', 5, '2015-11-25'),
    ('Ursula K. Le Guin', 'Fantasy', 8, '2013-08-15'),
    ('Patrick Rothfuss', 'Fantasy', 6, '2014-07-22'),
    ('Robin Hobb', 'Fantasy', 9, '2017-10-30'),
    ('Neil Gaiman', 'Fantasy', 11, '2019-12-05');
    
## select data from table DML Commands
SELECT * FROM public."Authors";

## Update data in the table 
UPDATE public."Authors"
SET "books_published" = 13,
    "last_published" = '2022-01-10'
WHERE "Author_id" = 3; -- Updating Brandon Sanderson's details

## Delete data from table
DELETE FROM public."Authors"
WHERE "Author_id" = 7; -- Deleting Robin Hobb


## Typescript 
## Define interfaces for tables
// src/interface.ts

// src/interface.ts

export interface Authors {
  Author_id?: number;  // "Author_id" integer NOT NULL DEFAULT nextval('authors\_author\_id\_seq'::regclass),
  Name: string;        // "Name" character varying COLLATE pg\_catalog."default" NOT NULL,
  genre: string;       // genre character varying COLLATE pg\_catalog."default" NOT NULL,
  books_published: number; // books_published integer NOT NULL,
  last_published: Date;    // last_published date NOT NULL,
}

export interface Books {
  Book_id?: number;    // "Book_id" integer NOT NULL DEFAULT nextval('books\_book\_id\_seq'::regclass),
  title: string;       // title character varying COLLATE pg\_catalog."default" NOT NULL,
  author_id: number;   // author_id integer NOT NULL,
  genre: string;       // genre character varying COLLATE pg\_catalog."default" NOT NULL,
  price: number;       // price numeric NOT NULL,
  rating?: number;     // rating numeric,
  published_date: Date; // published_date date NOT NULL,
}

export interface Customers {
  Customer_id?: number; // "Customer_id" integer NOT NULL DEFAULT nextval('customers\_customer\_id\_seq'::regclass),
  Name: string;         // "Name" character varying COLLATE pg\_catalog."default" NOT NULL,
  Email: string;        // "Email" character varying COLLATE pg\_catalog."default" NOT NULL,
  Total_spent: number;  // "Total_spent" numeric NOT NULL,
  Last_purchased: Date; // "Last_purchased" date NOT NULL,
}

export interface Review {
  Review_id?: number;  // "Review_id" integer NOT NULL DEFAULT nextval('review\_review\_id\_seq'::regclass),
  book_id: number;     // book_id integer NOT NULL,
  customer_id: number; // customer_id integer NOT NULL,
  rating: number;      // rating numeric NOT NULL,
  review_text?: string; // review_text text COLLATE pg\_catalog."default",
  review_date: Date;   // review_date date NOT NULL,
}

import pool from './db';
import { Authors, Books, Customers, Review } from './interface';
// Function to insert an author
async function insertAuthor(author: Authors) {
  const query = `
    INSERT INTO public."Authors" ("Name", genre, books_published, last_published)
    VALUES ($1, $2, $3, $4)
    RETURNING *;
  `;
  const values = [author.Name, author.genre, author.books_published, author.last_published];
  const result = await pool.query(query, values);
  return result.rows[0];
}

// Function to get all authors
async function getAuthors() {
  const query = `SELECT * FROM public."Authors";`;
  const result = await pool.query(query);
  return result.rows;
}

// Function to update a record in any table
async function updateRecord(table: string, record: any, primaryKey: string, id: number) {
  const setClause = Object.keys(record)
    .map((key, index) => `"${key}" = $${index + 1}`)
    .join(", ");
  const values = Object.values(record);

  const query = `
    UPDATE public."${table}"
    SET ${setClause}
    WHERE "${primaryKey}" = $${values.length + 1}
    RETURNING *;
  `;
  values.push(id);

  const result = await pool.query(query, values);
  return result.rows[0];
}

// Function to delete an author
async function deleteAuthor(author_id: number) {
  const query = `DELETE FROM public."Authors" WHERE "Author_id" = $1;`;
  const result = await pool.query(query, [author_id]);
  return result.rowCount > 0;
}

// Example usage
async function main() {
  // Insert a new author
  const newAuthor: Authors = {
    Name: 'Neil Gaiman',
    genre: 'Fantasy',
    books_published: 10,
    last_published: new Date('2021-05-15')
  };
  const insertedAuthor = await insertAuthor(newAuthor);
  console.log('Inserted Author:', insertedAuthor);

  // Update an author
  const updatedAuthor: Partial<Authors> = {
    Name: 'Neil Gaiman',
    genre: 'Fantasy, Horror',
    books_published: 11,
    last_published: new Date('2022-06-20')
  };
  const result = await updateRecord('Authors', updatedAuthor, 'Author_id', insertedAuthor.Author_id);
  console.log('Updated Author:', result);

  // we can similarly update books, customers, and reviews
}

main().catch(err => console.error(err));

